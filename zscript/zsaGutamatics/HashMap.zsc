class zsaGMHasher abstract {
	abstract virtualscope uint hash(Object o);
	abstract virtualscope bool eq(Object o0, Object o1);
	static void hashCombine(out uint seed, uint other) {
		seed ^= other + 0x9E3779B9 + (seed << 6) + (seed >> 2);
	}
}

class zsaGMBoxedInt {
	int val;
	static zsaGMBoxedInt create(int val) {
		let ret = new();
		ret.val = val;
		return ret;
	}
	zsaGMBoxedInt clone() {
		let ret = new();
		ret.val = self.val;
		return ret;
	}
}
class zsaGMIntHasher : zsaGMHasher {
	override uint hash(Object o) { return zsaGMBoxedInt(o).val; }
	override bool eq(Object o0, Object o1) { return zsaGMBoxedInt(o0).val == zsaGMBoxedInt(o1).val; }
}

class zsaGMBoxedUInt {
	uint val;
	static zsaGMBoxedUInt create(uint val) {
		let ret = new();
		ret.val = val;
		return ret;
	}
	zsaGMBoxedUInt clone() {
		let ret = new();
		ret.val = self.val;
		return ret;
	}
}
class zsaGMUIntHasher : zsaGMHasher {
	override uint hash(Object o) { return zsaGMBoxedUInt(o).val; }
	override bool eq(Object o0, Object o1) { return zsaGMBoxedUInt(o0).val == zsaGMBoxedUInt(o1).val; }
}

class zsaGMBoxedDouble {
	double val;
	static zsaGMBoxedDouble create(double val) {
		let ret = new();
		ret.val = val;
		return ret;
	}
	zsaGMBoxedDouble clone() {
		let ret = new();
		ret.val = self.val;
		return ret;
	}
}

class zsaGMBoxedString {
	String val;
	static zsaGMBoxedString create(String val) {
		let ret = new();
		ret.val = val;
		return ret;
	}
	zsaGMBoxedString clone() {
		let ret = new();
		ret.val = self.val;
		return ret;
	}
}

class zsaGMHashSentinel {}

class zsaGMHashUnoccupied {}

class zsaGMKVStorage {
	Array<Object> keys;
	Array<Object> values;
	uint loadCount;

	zsaGMHashUnoccupied unoccupied;

	zsaGMHashSentinel empty;
	zsaGMHashSentinel tombstone;

	const SEED32 = 0x27220a95u;
	private static uint hash(Object key, zsaGMHasher hasher) {
		let h = hasher.hash(key);
		return h * SEED32;
	}

	Object get(Object key, zsaGMHasher hasher) {
		let hash = hash(key, hasher);
		let size = uint(self.keys.size());
		let index = hash % size;
		let i = index;
		while (true) {
			let kb = self.keys[i];
			if (kb == self.empty) {
				break;
			}
			if (kb != self.tombstone && hasher.eq(kb, key)) {
				return self.values[i];
			}
			i = (i + 1) % size;
		}
		return self.unoccupied;
	}

	zsaGMKVStorage resized(uint newSize, zsaGMHasher hasher) {
		let newKV = new("zsaGMKVStorage");
		newKV.keys.resize(newSize);
		newKV.values.resize(newSize);

		newKV.unoccupied = self.unoccupied;
		newKV.empty = self.empty;
		newKV.tombstone = self.tombstone;

		newKV.clear();

		for (let i = 0; i < self.keys.size(); i++) {
			let k = self.keys[i];
			if (k != self.empty && k != self.tombstone) {
				newKV.insert(k, self.values[i], hasher);
			}
		}

		return newKV;
	}

	void insert(Object key, Object value, zsaGMHasher hasher) {
		let hash = hash(key, hasher);
		let size = uint(self.keys.size());
		let index = hash % size;
		{
			let i = index;
			while (true) {
				let kb = self.keys[i];
				if (kb == self.empty) {
					break;
				}
				if (kb != self.tombstone && hasher.eq(kb, key)) {
					self.values[i] = value;
					return;
				}
				i = (i + 1) % size;
			}
		}
		{
			let i = index;
			while (true) {
				let kb = self.keys[i];
				if (kb == self.empty || kb == self.tombstone) {
					self.keys[i] = key;
					self.values[i] = value;
					if (kb == self.empty) {
						self.loadCount += 1;
					}
					break;
				}
				i = (i + 1) % size;
			}
		}
	}

	Object remove(Object key, zsaGMHasher hasher) {
		let hash = hash(key, hasher);
		let size = uint(self.keys.size());
		{
			let index = hash % size;
			let i = index;
			while (true) {
				let kb = self.keys[i];
				if (kb == self.empty) {
					break;
				}
				if (kb != self.tombstone && hasher.eq(kb, key)) {
					let val = self.values[i];
					self.keys[i] = self.tombstone;
					self.values[i] = NULL;
					return val;
				}
				i = (i + 1) % size;
			}
		}
		return self.unoccupied;
	}

	bool isEmpty() {
		for (let i = 0; i < self.keys.size(); i++) {
			let k = self.keys[i];
			if (k != self.empty && k != self.tombstone) {
				return false;
			}
		}
		return true;
	}

	void clear() {
		for (let i = 0; i < self.keys.size(); i++) {
			self.keys[i] = self.empty;
			self.values[i] = NULL;
		}
		self.loadCount = 0u;
	}
}

class zsaGMHashMapIterator {
	private zsaGMKVStorage m;
	private int i;

	static zsaGMHashMapIterator internalCreate(zsaGMKVStorage kv) {
		let ret = new();
		ret.m = kv;
		ret.i = 0;
		return ret;
	}

	Object, Object next() {
		while (self.i < m.keys.size()) {
			let k = m.keys[self.i];
			let v = m.values[self.i];
			self.i += 1;
			if (k != self.m.empty && k != self.m.tombstone) {
				return k, v;
			}
		}
		return self.m.unoccupied, NULL;
	}
}

class zsaGMHashMap {
	private zsaGMKVStorage kv;
	private zsaGMHasher hasher;

	static zsaGMHashMap create(zsaGMHasher hasher) {
		let ret = new();
		ret.kv = new("zsaGMKVStorage");
		ret.kv.keys.resize(8);
		ret.kv.values.resize(8);
		ret.kv.unoccupied = new("zsaGMHashUnoccupied");
		ret.kv.empty = new("zsaGMHashSentinel");
		ret.kv.tombstone = new("zsaGMHashSentinel");
		ret.kv.clear();
		ret.hasher = hasher;
		return ret;
	}

	Object get(Object key) {
		return self.kv.get(key, self.hasher);
	}

	bool containsKey(Object key) {
		return !(self.kv.get(key, self.hasher) is "zsaGMHashUnoccupied");
	}

	void resize(uint newSize) {
		self.kv = self.kv.resized(newSize, hasher);
	}

	void insert(Object key, Object value) {
		if (self.kv.loadCount + 1 > uint(self.kv.keys.size() * 0.5)) {
			self.resize(self.kv.keys.size() * 2);
		}
		self.kv.insert(key, value, self.hasher);
	}

	Object remove(Object key) {
		return self.kv.remove(key, self.hasher);
	}

	bool isEmpty() {
		return self.kv.isEmpty();
	}
	
	void clear() {
		self.kv.clear();
	}

	zsaGMHashMapIterator iter() {
		return zsaGMHashMapIterator.internalCreate(self.kv);
	}

	String debugRepr() {
		let ret = "";
		for (let i = 0; i < self.kv.keys.size(); i++) {
			ret.appendFormat("%d : ", i);
			let k = self.kv.keys[i];
			if (k == self.kv.empty) {
				ret.appendFormat("EMPTY");
			} else if (k == self.kv.tombstone) {
				ret.appendFormat("TOMBSTONE");
			} else {
				ret.appendFormat("%p -> %p", k, self.kv.values[i]);
			}
			if (i != self.kv.keys.size() - 1) {
				ret.appendFormat("\n");
			}
		}
		return ret;
	}

	double loadFactor() {
		return double(self.kv.loadCount) / double(self.kv.values.size());
	}
	uint bucketCount() {
		return self.kv.values.size();
	}
}

class zsaGMHashSetIterator {
	private zsaGMHashMapIterator i;

	static zsaGMHashSetIterator internalCreate(zsaGMHashMapIterator i) {
		let ret = new();
		ret.i = i;
		return ret;
	}

	Object next() {
		return self.i.next();
	}
}

class zsaGMHashSet {
	private zsaGMHashMap hm;

	static zsaGMHashSet create(zsaGMHasher hasher) {
		let ret = new();
		ret.hm = zsaGMHashMap.create(hasher);
		return ret;
	}

	bool contains(Object key) {
		return self.hm.containsKey(key);
	}

	void resize(uint newSize) {
		self.hm.resize(newSize);
	}

	void insert(Object key) {
		self.hm.insert(key, NULL);
	}

	Object remove(Object key) {
		return self.hm.remove(key);
	}

	bool isEmpty() {
		return self.hm.isEmpty();
	}

	void clear() {
		self.hm.clear();
	}

	zsaGMHashSetIterator iter() {
		return zsaGMHashSetIterator.internalCreate(self.hm.iter());
	}

	String debugRepr() {
		return self.hm.debugRepr();
	}
}
